# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from helper import product_select, product_detail, product_basket, product_name, product_price,start_up, continue_shopping

data = {'1': ['Cooker','Beko',10105,'not active', '£7.50'],
            '2':['Fridge Freezer','Bush',12691,'still active', '£3.39'],
            '3': ['Condenser Dryer','Bosch',12695,'not active', '£7.50'],
            '4': ['Combination Boiler','Baxi',10118,'not active', '£17.50']}

@pytest.mark.test_1
def test_tc01_search_product():
            start_up()
            time.sleep(2)
            product_select(str(data['1'][2]))
            product_detail(str(data['1'][1]),str(data['1'][3]),str(data['1'][2]))
            product_basket()
            name=product_name()
            price=product_price()
            print("\n")
            print("************ Test Run **************")
            assert (data['1'][1]+" "+data['1'][0]==str(name))
            assert (data['1'][4]==str(price))
            print("Test Validation Successfull")
            print("Searched Customer Product :"+name+" matched")
            print("Selected Product Price :"+price+" matched")
            continue_shopping()

@pytest.mark.test_2
def test_tc02_search_product():
            start_up()
            time.sleep(2)
            product_select(str(data['2'][2]))
            product_detail(str(data['2'][1]),str(data['2'][3]),str(data['2'][2]))
            product_basket()
            name=product_name()
            price=product_price()
            print("\n")
            print("************ Test Run **************")
            assert (data['2'][1]+" "+data['2'][0]==str(name))
            assert (data['2'][4]==str(price))
            print("Test Validation Successfull")
            print("Searched Customer Product :"+name+" matched")
            print("Selected Product Price :"+price+" matched")
            continue_shopping()

@pytest.mark.test_3
def test_tc03_search_product():
            start_up()
            time.sleep(2)
            product_select(str(data['3'][2]))
            product_detail(str(data['3'][1]),str(data['3'][3]),str(data['3'][2]))
            product_basket()
            name=product_name()
            price=product_price()
            print("\n")
            print("************ Test Run **************")
            assert (data['3'][1]+" "+data['3'][0]==str(name))
            assert (data['3'][4]==str(price))
            print("Test Validation Successfull")
            print("Searched Customer Product :"+name+" matched")
            print("Selected Product Price :"+price+" matched")
            continue_shopping()

@pytest.mark.test_4
def test_tc04_search_product():
            start_up()
            time.sleep(2)
            product_select(str(data['4'][2]))
            product_detail(str(data['4'][1]),str(data['4'][3]),str(data['4'][2]))
            product_basket()
            name=product_name()
            price=product_price()
            print("\n")
            print("************ Test Run **************")
            assert (data['4'][1]+" "+data['4'][0]==str(name))
            assert (data['4'][4]==str(price))
            print("Test Validation Successfull")
            print("Searched Customer Product :"+name+" matched")
            print("Selected Product Price :"+price+" matched")
            continue_shopping()
